package handlers

import (
	"fmt"
	"math/rand"
	"time"

	"github.com/Crang25/21points_tgbot/keyboards"
	"github.com/Crang25/21points_tgbot/models"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api"
)

// ‚ù§Ô∏è ‚ô¶Ô∏è ‚ô£ ‚ô†
// Deck - –∫–æ–ª–æ–¥–∞ –∫–∞—Ä—Ç
var deck = [36]models.Card{
	{Worth: 6, Value: "|‚ù§Ô∏è 6|"}, {Worth: 7, Value: "|‚ù§Ô∏è 7|"}, {Worth: 8, Value: "|‚ù§Ô∏è 8|"},
	{Worth: 9, Value: "|‚ù§Ô∏è 9|"}, {Worth: 10, Value: "|‚ù§Ô∏è 10|"}, {Worth: 2, Value: "|‚ù§Ô∏è –í|"},
	{Worth: 3, Value: "|‚ù§Ô∏è –î|"}, {Worth: 4, Value: "|‚ù§Ô∏è –ö|"}, {Worth: 11, Value: "|‚ù§Ô∏è –¢|"},

	{Worth: 6, Value: "|‚ô¶Ô∏è 6|"}, {Worth: 7, Value: "|‚ô¶Ô∏è 7|"}, {Worth: 8, Value: "|‚ô¶Ô∏è 8|"},
	{Worth: 9, Value: "|‚ô¶Ô∏è 9|"}, {Worth: 10, Value: "|‚ô¶Ô∏è 10|"}, {Worth: 2, Value: "|‚ô¶Ô∏è –í|"},
	{Worth: 3, Value: "|‚ô¶Ô∏è –î|"}, {Worth: 4, Value: "|‚ô¶Ô∏è –ö|"}, {Worth: 11, Value: "|‚ô¶Ô∏è –¢|"},

	{Worth: 6, Value: "|‚ô£ 6|"}, {Worth: 7, Value: "|‚ô£ 7|"}, {Worth: 8, Value: "|‚ô£ 8|"},
	{Worth: 9, Value: "|‚ô£ 9|"}, {Worth: 10, Value: "|‚ô£ 10|"}, {Worth: 2, Value: "|‚ô£ –í|"},
	{Worth: 3, Value: "|‚ô£ –î|"}, {Worth: 4, Value: "|‚ô£ –ö|"}, {Worth: 11, Value: "|‚ô£ –¢|"},

	{Worth: 6, Value: "|‚ô† 6|"}, {Worth: 7, Value: "|‚ô† 7|"}, {Worth: 8, Value: "|‚ô† 8|"},
	{Worth: 9, Value: "|‚ô† 9|"}, {Worth: 10, Value: "|‚ô† 10|"}, {Worth: 2, Value: "|‚ô† –í|"},
	{Worth: 3, Value: "|‚ô† –î|"}, {Worth: 4, Value: "|‚ô† –ö|"}, {Worth: 11, Value: "|‚ô† –¢|"},
}

// –°—á–µ—Ç—á–∏–∫
var counter = len(deck) - 1

// Start - –∏–≥—Ä–∞
func Start(updates tgbotapi.UpdatesChannel, bot *tgbotapi.BotAPI, chatID int64, firstName string) {
	// –ü–µ—Ä–µ–º–µ—à—ã–≤–∞–µ–º –∫–æ–ª–æ–¥—É
	rand.Seed(time.Now().UnixNano())
	rand.Shuffle(len(deck), func(i, j int) {
		deck[i], deck[j] = deck[j], deck[i]
	})

	//  –ö–∞—Ä—Ç—ã –∏–≥—Ä–æ–∫–∞ –∏ –¥–∏–ª–µ—Ä–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ
	player := models.PlayerDeck{}
	banker := models.PlayerDeck{}

	// –ü–µ—Ä–≤–∞—è –∫–∞—Ä—Ç–∞ –¥–∏–ª–µ—Ä–∞
	banker.PointsQuan += deck[counter].Worth
	banker.Deck = append(banker.Deck, deck[counter].Value)
	counter--

	// –ü–µ—Ä–≤–∞—è –∫–∞—Ä—Ç–∞ –∏–≥—Ä–æ–∫–∞
	player.PointsQuan = deck[counter].Worth
	player.Deck = append(player.Deck, deck[counter].Value)
	counter--

	msg := tgbotapi.NewMessage(chatID,
		fmt.Sprintf("–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å!üé∞\n–ö–æ–ª-–≤–æ –æ—á–∫–æ–≤ –¥–∏–ª–µ—Ä–∞: %d üíµ\n–ö–∞—Ä—Ç—ã –¥–∏–ª–µ—Ä–∞: %s\n",
			banker.PointsQuan, strCards(banker.Deck)))

	bot.Send(msg)

	msg.Text = fmt.Sprintf("%s, –∫–æ–ª-–≤–æ –≤–∞—à–∏—Ö –æ—á–∫–æ–≤ %d üíµ\n–í–∞—à–∏ –∫–∞—Ä—Ç—ã: %s",
		firstName, player.PointsQuan, strCards(player.Deck))
	msg.ReplyMarkup = keyboards.GameKeyboard
	counter--

	bot.Send(msg)

	// –ü—Ä–∏–Ω–∏–º–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	for update := range updates {

		if update.Message == nil {
			continue
		}

		// –°–¥–∞—á–∞ –∫–∞—Ä—Ç –∏–≥—Ä–æ–∫—É, –ø–æ–∫–∞ –æ–Ω —Å–∞–º –Ω–µ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç, –ª–∏–±–æ –ø–æ–∫–∞ –Ω–µ –Ω–∞–±–µ—Ä–µ—Ç—Å—è –±–æ–ª—å—à–µ –ª–∏–±–æ —Ä–∞–≤–Ω–æ 21
		if update.Message.Text == "–ó–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É ‚ùå" {
			msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
			msg.ReplyMarkup = tgbotapi.NewRemoveKeyboard(true)
			msg.ReplyMarkup = keyboards.AgainKeyboard
			bot.Send(msg)
			return
		} else if update.Message.Text == "–ï—â–µ üëç" { // –î–∞–µ–º –∫–∞—Ä—Ç—É –∏–≥—Ä–æ–∫—É

			player.PointsQuan += deck[counter].Worth
			player.Deck = append(player.Deck, deck[counter].Value)
			counter--

			msg.Text = fmt.Sprintf("%s, –∫–æ–ª-–≤–æ –≤–∞—à–∏—Ö –æ—á–∫–æ–≤ %d üíµ\n–í–∞—à–∏ –∫–∞—Ä—Ç—ã: %s",
				firstName, player.PointsQuan, strCards(player.Deck))
			msg.ReplyMarkup = keyboards.GameKeyboard
			bot.Send(msg)

		}

		msg.ReplyMarkup = tgbotapi.NewRemoveKeyboard(true)

		// –ò–≥—Ä–æ–∫ –Ω–∞–±—Ä–∞–ª 21 –æ—á–∫–æ
		if player.PointsQuan == 21 {
			msg.Text = fmt.Sprintf("%s, –≤—ã –≤—ã–π–≥—Ä–∞–ª–∏!üèÜ\n–£ –≤–∞—Å 21 –æ—á–∫–æ\n–í–∞—à–∏ –∫–∞—Ä—Ç—ã: %s",
				firstName, strCards(player.Deck))
			endGame(&msg, bot)
			return

			// –ò–≥—Ä–æ–∫ –ø—Ä–æ–∏–≥—Ä–∞–ª - –Ω–∞–±—Ä–∞–ª –±–æ–ª—å—à–µ 21
		} else if player.PointsQuan >= 21 {
			msg.Text = fmt.Sprintf("%s, –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏.\n–£ –≤–∞—Å %d –æ—á–∫–∞(–æ–≤), —ç—Ç–æ –±–æ–ª—å—à–µ 21\n–í–∞—à–∏ –∫–∞—Ä—Ç—ã: %s",
				firstName, player.PointsQuan, strCards(player.Deck))
			endGame(&msg, bot)
			return

		} else if update.Message.Text == "–•–≤–∞—Ç–∏—Ç üëé" {
			generateBankerDeck(&banker)
			// –ï—Å–ª–∏ –≤—ã–π–≥—Ä–∞–ª –±–∞–Ω–∫–∏—Ä
			if banker.IsWin || banker.PointsQuan > player.PointsQuan {
				msg.Text = fmt.Sprintf(
					"%s, –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏\n–ö–æ–ª-–≤–æ –≤–∞—à–∏—Ö –æ—á–∫–æ–≤: %d üíµ\n–í–∞—à–∏ –∫–∞—Ä—Ç—ã: %s\n\n–ö–æ–ª-–≤–æ –æ—á–∫–æ–≤ –¥–∏–ª–µ—Ä–∞: %d üíµ\n–ö–∞—Ä—Ç—ã –¥–∏–ª–µ—Ä–∞: %s",
					firstName, player.PointsQuan, player.Deck, banker.PointsQuan, banker.Deck)
				endGame(&msg, bot)
				return
				// –í—ã–π–≥—Ä–∞–ª –∏–≥—Ä–æ–∫
			} else if banker.PointsQuan < player.PointsQuan {
				msg.Text = fmt.Sprintf(
					"%s, –≤—ã –≤—ã–π–≥—Ä–∞–ª–∏! üí∞\n–ö–æ–ª-–≤–æ –≤–∞—à–∏—Ö –æ—á–∫–æ–≤: %d üíµ\n–í–∞—à–∏ –∫–∞—Ä—Ç—ã: %s\n\n–ö–æ–ª-–≤–æ –æ—á–∫–æ–≤ –¥–∏–ª–µ—Ä–∞: %d üíµ\n–ö–∞—Ä—Ç—ã –¥–∏–ª–µ—Ä–∞: %s",
					firstName, player.PointsQuan, player.Deck, banker.PointsQuan, banker.Deck)
				endGame(&msg, bot)
				return
			}
		}
	}

}

// –§—É–Ω–∫—Ü–∏—è, "—Å–∫–ª–µ–∏–≤–∞—é—â–∞—è" —Å–ª–∞–π—Å —Å—Ç—Ä–æ–∫ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
func strCards(cards []string) string {
	str := ""
	for _, card := range cards {
		str += card + ", "
	}
	return str
}

// –§—É–Ω–∫—Ü–∏—è, –≤ –∫–æ—Ç–æ—Ä–æ–π –∫–∞—Ä—Ç—ã —Ä–∞–∑–¥–∞—é—Ç—Å—è –¥–∏–ª–µ—Ä—É, –ø–æ–∫–∞ —Å—É–º–º–∞ –æ—á–∫–æ–≤ –º–µ–Ω—å—à–µ 17
func generateBankerDeck(bankir *models.PlayerDeck) {
	for bankir.PointsQuan < 21 {
		if bankir.PointsQuan == 21 {
			bankir.IsWin = true
			return
		} else if bankir.PointsQuan < 21 && bankir.PointsQuan >= 17 {
			return
		}

		bankir.PointsQuan += deck[counter].Worth
		bankir.Deck = append(bankir.Deck, deck[counter].Value)
		counter--
	}
}

// –ó–∞–≤–µ—Ä—à–Ω–∏–µ —Ä–∞—É–Ω–¥–∞
func endGame(msg *tgbotapi.MessageConfig, bot *tgbotapi.BotAPI) {
	msg.ReplyMarkup = tgbotapi.NewRemoveKeyboard(true)
	msg.ReplyMarkup = keyboards.AgainKeyboard
	bot.Send(msg)
}
